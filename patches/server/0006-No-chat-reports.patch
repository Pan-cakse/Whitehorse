From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: VidTu <60929459+VidTu@users.noreply.github.com>
Date: Tue, 4 Oct 2022 02:11:52 +0300
Subject: [PATCH] No chat reports

Original code:
<https://github.com/e-im/FreedomChat/blob/main/src/main/java/ru/bk/oharass/freedomchat/FreedomChat.java>
Licensed under GNU General Public License v3.0
<https://github.com/e-im/FreedomChat/blob/main/LICENSE>

diff --git a/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java b/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java
index d032fce4cf33027c8803b9ab122780eeb831c932..ff104ca7ae29634b5bbd53ea7efc15b6bccb4237 100644
--- a/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java
@@ -52,8 +52,15 @@ public interface OutgoingPlayerChatMessage {
             if (!playerChatMessage.isFullyFiltered()) {
                 RegistryAccess registryAccess = sender.level.registryAccess();
                 ChatType.BoundNetwork boundNetwork = params.toNetwork(registryAccess);
+                // Whitehorse start - no chat reports
+                /*
                 sender.connection.send(new ClientboundPlayerChatPacket(playerChatMessage, boundNetwork));
                 sender.connection.addPendingMessage(playerChatMessage);
+                 */
+                Component content = playerChatMessage.unsignedContent().orElse(playerChatMessage.signedContent().decorated());
+                Component decorated = boundNetwork.resolve(registryAccess).map(c -> c.decorate(content)).orElse(content);
+                sender.connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(decorated, false));
+                // Whitehorse end
             }
 
         }
@@ -91,10 +98,17 @@ public interface OutgoingPlayerChatMessage {
                 this.playersWithFullMessage.add(sender);
                 RegistryAccess registryAccess = sender.level.registryAccess();
                 ChatType.BoundNetwork boundNetwork = params.toNetwork(registryAccess);
+                // Whitehorse start - no chat reports
+                /*
                 sender.connection.send(new ClientboundPlayerChatPacket(playerChatMessage, boundNetwork), PacketSendListener.exceptionallySend(() -> {
                     return new ClientboundPlayerChatHeaderPacket(this.message);
                 }));
                 sender.connection.addPendingMessage(playerChatMessage);
+                 */
+                Component content = playerChatMessage.unsignedContent().orElse(playerChatMessage.signedContent().decorated());
+                Component decorated = boundNetwork.resolve(registryAccess).map(c -> c.decorate(content)).orElse(content);
+                sender.connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(decorated, false));
+                // Whitehorse end
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 5819e8e5e3c6f87eb123cf16091ea74357d53b3b..f21ffa5bb0328946fb9e95419c5bf04399075d60 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1903,7 +1903,8 @@ public class ServerPlayer extends Player {
 
     public void sendChatHeader(SignedMessageHeader header, MessageSignature headerSignature, byte[] bodyDigest) {
         if (this.acceptsChatMessages()) {
-            this.connection.send(new ClientboundPlayerChatHeaderPacket(header, headerSignature, bodyDigest));
+            // Whitehorse - no chat reports
+            // this.connection.send(new ClientboundPlayerChatHeaderPacket(header, headerSignature, bodyDigest));
         }
 
     }
@@ -1980,7 +1981,7 @@ public class ServerPlayer extends Player {
     }
 
     public void sendServerStatus(ServerStatus metadata) {
-        this.connection.send(new ClientboundServerDataPacket(metadata.getDescription(), metadata.getFavicon(), metadata.previewsChat(), metadata.enforcesSecureChat()));
+        this.connection.send(new ClientboundServerDataPacket(metadata.getDescription(), metadata.getFavicon(), metadata.previewsChat(), true)); // Whitehorse - no chat reports
     }
 
     @Override
